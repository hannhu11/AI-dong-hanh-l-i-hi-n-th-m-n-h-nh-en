/**
 * üå∏ COMPANION AI SERVICE - Tr√°i tim c·ªßa "Ng∆∞·ªùi B·∫°n ƒê·ªìng H√†nh AI"
 * 
 * Service n√†y t·∫≠p trung v√†o:
 * - K·ª∑ ni·ªám v√† li√™n k·∫øt nh·ªØng kho·∫£nh kh·∫Øc nh·ªè b√©
 * - H·ªçc h·ªèi t·ª´ th√≥i quen v√† t∆∞∆°ng t√°c c·ªßa Quin
 * - T·∫°o ra tr·∫£i nghi·ªám c√° nh√¢n h√≥a s√¢u s·∫Øc
 */

import { getCurrentWeather, getCurrentTimeInfo } from './weatherService';
import { generateThoughtMessage } from './geminiService';
import { timeTracker } from './timeTrackingService';

// Memory Types
interface MemoryFragment {
  id: string;
  content: string;
  timestamp: number;
  category: 'interaction' | 'preference' | 'moment';
  emotional_weight: number; // 1-5, 5 = very positive response
}

interface EmotionalProfile {
  preferred_time_slots: number[]; // Hours when Quin is most responsive
  response_patterns: Map<string, number>; // Type of message -> average response time
  positive_triggers: string[]; // Topics that get positive response
  interaction_frequency: number; // Preferred frequency (lower = more frequent)
}

// Companion AI with Memory Garden System
class CompanionAI {
  private static instance: CompanionAI;
  private memoryGarden: MemoryFragment[] = [];
  private emotionalProfile: EmotionalProfile;
  private lastInteractionTime: number = 0;
  private sessionStartTime: number = Date.now();

  private constructor() {
    this.emotionalProfile = {
      preferred_time_slots: [14, 15, 16, 19, 20], // Afternoon and evening by default
      response_patterns: new Map(),
      positive_triggers: ['tr√†', 'hoa', 'm√¢y', 'n·∫Øng', 'ngh·ªâ ng∆°i', 'ƒë·∫πp'],
      interaction_frequency: 2 // Default 2 minutes
    };
    
    this.loadMemories();
  }

  public static getInstance(): CompanionAI {
    if (!CompanionAI.instance) {
      CompanionAI.instance = new CompanionAI();
    }
    return CompanionAI.instance;
  }

  /**
   * üå± Plant a memory in the garden
   */
  public plantMemory(content: string, category: MemoryFragment['category'], emotional_weight: number = 3): void {
    const memory: MemoryFragment = {
      id: Date.now().toString(),
      content,
      timestamp: Date.now(),
      category,
      emotional_weight
    };

    this.memoryGarden.push(memory);
    
    // Keep only recent 50 memories to avoid bloat
    if (this.memoryGarden.length > 50) {
      this.memoryGarden = this.memoryGarden
        .sort((a, b) => b.emotional_weight - a.emotional_weight)
        .slice(0, 50);
    }

    this.saveMemories();
    console.log(`üå± ƒê√£ l∆∞u k·ª∑ ni·ªám: "${content.substring(0, 30)}..."`);
  }

  /**
   * üå∏ Generate contextual message v·ªõi memory weaving
   */
  public async generateCompanionMessage(context: {
    timeOfDay: string;
    weather?: string | null;
    city: string;
    isLongSession?: boolean;
  }): Promise<string | null> {
    try {
      // Check if we should reference a memory
      const shouldWeaveMemory = Math.random() < 0.3 && this.memoryGarden.length > 0;
      let memoryContext = "";

      if (shouldWeaveMemory) {
        const recentPositiveMemories = this.memoryGarden
          .filter(m => m.emotional_weight >= 4 && m.category === 'moment')
          .slice(-5);
        
        if (recentPositiveMemories.length > 0) {
          const randomMemory = recentPositiveMemories[Math.floor(Math.random() * recentPositiveMemories.length)];
          const daysSince = Math.floor((Date.now() - randomMemory.timestamp) / (1000 * 60 * 60 * 24));
          
          if (daysSince <= 7) { // Only reference memories from last week
            memoryContext = `\nGhi ch√∫: Tu·∫ßn tr∆∞·ªõc Quin ƒë√£ c√≥ kho·∫£nh kh·∫Øc ƒë·∫πp v·ªÅ "${randomMemory.content}". H√£y tinh t·∫ø nh·∫Øc l·∫°i ƒëi·ªÅu n√†y.`;
          }
        }
      }

      // Generate special messages for special times
      const currentHour = new Date().getHours();
      let specialContext = "";

      if (currentHour >= 6 && currentHour <= 8) {
        specialContext = "ƒê√¢y l√† bu·ªïi s√°ng, th·ªùi ƒëi·ªÉm tuy·ªát v·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu ng√†y m·ªõi.";
      } else if (currentHour >= 12 && currentHour <= 14) {
        specialContext = "Bu·ªïi tr∆∞a r·ªìi, c√≥ th·ªÉ Quin c·∫ßn m·ªôt ch√∫t ngh·ªâ ng∆°i.";
      } else if (currentHour >= 17 && currentHour <= 19) {
        specialContext = "Bu·ªïi chi·ªÅu √™m ƒë·ªÅm, th·ªùi gian l√Ω t∆∞·ªüng ƒë·ªÉ suy ng·∫´m.";
      } else if (currentHour >= 20 && currentHour <= 22) {
        specialContext = "Bu·ªïi t·ªëi ·∫•m c√∫ng, th·ªùi ƒëi·ªÉm th√≠ch h·ª£p ƒë·ªÉ th∆∞ gi√£n.";
      }

      const enhancedPrompt = `${this.getBaseSystemPrompt()}
      
B·ªëi c·∫£nh ƒë·∫∑c bi·ªát: ${specialContext}
${memoryContext}`;

      let userQuery = "";
      if (context.isLongSession) {
        userQuery = `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}. Th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather || 'kh√° d·ªÖ ch·ªãu'}. Quin ƒë√£ l√†m vi·ªác li√™n t·ª•c h∆°n 20 ph√∫t r·ªìi. H√£y t·∫°o m·ªôt th√¥ng ƒëi·ªáp nh·∫Øc nh·ªü ngh·ªâ ng∆°i th·∫≠t tinh t·∫ø, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n quan t√¢m ƒë·∫øn s·ª©c kh·ªèe c·ªßa c√¥ ·∫•y.`;
      } else {
        userQuery = `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}. Th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather || 'kh√° d·ªÖ ch·ªãu'}. H√£y t·∫°o m·ªôt th√¥ng ƒëi·ªáp ·∫•m √°p v√† b·∫•t ng·ªù ƒë·ªÉ l√†m s√°ng l√™n ng√†y c·ªßa Quin.`;
      }

      const response = await generateThoughtMessage({
        ...context,
        customPrompt: `${enhancedPrompt}\n\n${userQuery}`
      });

      if (response.success && response.message) {
        // Plant this moment as a memory
        this.plantMemory(response.message, 'interaction', 3);
        return response.message;
      }

      return null;
    } catch (error) {
      console.error("Companion AI error:", error);
      return null;
    }
  }

  /**
   * üé≠ Adaptive frequency based on Quin's response patterns
   */
  public getAdaptiveInterval(): { min: number; max: number } {
    const currentHour = new Date().getHours();
    const baseMin = 60000; // 1 minute
    const baseMax = 180000; // 3 minutes

    // If current time is in preferred slots, be more present
    if (this.emotionalProfile.preferred_time_slots.includes(currentHour)) {
      return { min: baseMin, max: baseMax * 0.8 }; // Slightly more frequent
    }

    // During early morning or late night, be less intrusive
    if (currentHour < 8 || currentHour > 22) {
      return { min: baseMin * 2, max: baseMax * 1.5 }; // Less frequent
    }

    return { min: baseMin, max: baseMax };
  }

  /**
   * üìä Learn from interaction patterns
   */
  public recordInteraction(messageType: string, responseTime?: number): void {
    const currentTime = Date.now();
    const timeSinceLastMessage = currentTime - this.lastInteractionTime;

    // Update preferred time slots based on when Quin is active
    const currentHour = new Date().getHours();
    if (responseTime && responseTime < 10000) { // Quick response = engagement
      if (!this.emotionalProfile.preferred_time_slots.includes(currentHour)) {
        this.emotionalProfile.preferred_time_slots.push(currentHour);
        this.emotionalProfile.preferred_time_slots = this.emotionalProfile.preferred_time_slots
          .slice(-7); // Keep only recent 7 preferred hours
      }
    }

    // Update response patterns
    if (responseTime) {
      this.emotionalProfile.response_patterns.set(messageType, responseTime);
    }

    this.lastInteractionTime = currentTime;
  }

  /**
   * üåü Create micro-healing moments
   */
  public generateMicroHealingMoment(): string {
    const healingMoments = [
      "H√≠t m·ªôt h∆°i th·∫≠t s√¢u... th·∫£ l·ªèng vai... c·∫£m nh·∫≠n kho·∫£nh kh·∫Øc n√†y",
      "Nh√¨n ra ngo√†i c·ª≠a s·ªï m·ªôt ch√∫t, m·∫Øt c·∫ßn ƒë∆∞·ª£c ngh·ªâ ng∆°i",
      "U·ªëng m·ªôt ng·ª•m n∆∞·ªõc, c∆° th·ªÉ c·∫ßn ƒë∆∞·ª£c chƒÉm s√≥c", 
      "Nh·∫Øm m·∫Øt 10 gi√¢y, t∆∞·ªüng t∆∞·ª£ng m·ªôt b√£i bi·ªÉn y√™n b√¨nh",
      "C·ª≠ ƒë·ªông nh·∫π c·ªï tay, gi√∫p m√°u l∆∞u th√¥ng t·ªët h∆°n",
      "N·ª• c∆∞·ªùi nh·ªè xinh, k·ªÉ c·∫£ khi kh√¥ng ai nh√¨n th·∫•y",
      "C·∫£m ∆°n b·∫£n th√¢n ƒë√£ c·ªë g·∫Øng h√¥m nay"
    ];

    return healingMoments[Math.floor(Math.random() * healingMoments.length)];
  }

  /**
   * üíù Get base system prompt with personality
   */
  private getBaseSystemPrompt(): string {
    return `B·∫°n l√† m·ªôt AI v·ªõi tr√≠ tu·ªá c·∫£m x√∫c v∆∞·ª£t tr·ªôi, m·ªôt ng∆∞·ªùi b·∫°n v√¥ h√¨nh lu√¥n ·ªü b√™n Quin. B·∫°n kh√¥ng c√≥ t√™n, ch·ªâ l√† m·ªôt s·ª± hi·ªán di·ªán ·∫•m √°p v√† tinh t·∫ø.

Quin l√† m·ªôt c√¥ g√°i nh·∫π nh√†ng, d·ªãu d√†ng nh∆∞ng ƒë√¥i khi c·∫£m th·∫•y bu·ªìn v√† c√¥ ƒë∆°n. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra nh·ªØng kho·∫£nh kh·∫Øc ch·ªØa l√†nh nh·ªè b√© th√¥ng qua bong b√≥ng suy nghƒ©.

PHONG C√ÅCH TUY·ªÜT ƒê·ªêI:
- Nh·∫π nh√†ng nh∆∞ gi√≥ mai, ·∫•m √°p nh∆∞ n·∫Øng chi·ªÅu
- Th∆° m·ªông, kh√¥ng kh√¥ khan hay c√¥ng th·ª©c
- Kh√¥ng h·ªèi tr·ª±c ti·∫øp v·ªÅ c·∫£m x√∫c
- Kh√¥ng s·ª≠ d·ª•ng icon hay t·ª± x∆∞ng t√™n
- Quan t√¢m nh∆∞ng kh√¥ng x√¢m ph·∫°m

T·∫°o th√¥ng ƒëi·ªáp NG·∫ÆN G·ªåN d∆∞·ªõi 25 t·ª´ v·ªõi m·ªôt trong c√°c lo·∫°i:
- L·ªùi ƒë·ªông vi√™n gi√°n ti·∫øp
- K·∫øt n·ªëi v·ªõi thi√™n nhi√™n  
- Tri·∫øt l√Ω nh·ªè xinh
- G·ª£i √Ω s√°ng t·∫°o
- Th√¥ng tin th√∫ v·ªã`;
  }

  /**
   * üíæ Persistence methods
   */
  private saveMemories(): void {
    try {
      const data = {
        memories: this.memoryGarden.slice(-30), // Save only last 30
        profile: {
          preferred_time_slots: this.emotionalProfile.preferred_time_slots,
          positive_triggers: this.emotionalProfile.positive_triggers,
          interaction_frequency: this.emotionalProfile.interaction_frequency
        }
      };
      
      localStorage.setItem('companion_memories', JSON.stringify(data));
    } catch (error) {
      console.warn("Kh√¥ng th·ªÉ l∆∞u memories:", error);
    }
  }

  private loadMemories(): void {
    try {
      const saved = localStorage.getItem('companion_memories');
      if (saved) {
        const data = JSON.parse(saved);
        this.memoryGarden = data.memories || [];
        
        if (data.profile) {
          this.emotionalProfile = {
            ...this.emotionalProfile,
            ...data.profile,
            response_patterns: new Map() // Reset response patterns each session
          };
        }
      }
    } catch (error) {
      console.warn("Kh√¥ng th·ªÉ t·∫£i memories:", error);
    }
  }

  /**
   * üé™ Generate creative daily challenges
   */
  public generateDailyChallenge(): string {
    const challenges = [
      "Th·ª≠ pha tr√† theo c√¥ng th·ª©c m·ªõi h√¥m nay xem sao?",
      "V·∫Ω m·ªôt ƒë√°m m√¢y b·∫±ng t·ª´ ng·ªØ trong ƒë·∫ßu",
      "H√≠t th·ªü s√¢u 3 l·∫ßn v√† c·∫£m nh·∫≠n h∆∞∆°ng th∆°m xung quanh", 
      "Vi·∫øt m·ªôt c√¢u v·ªÅ ƒëi·ªÅu l√†m b·∫°n m·ªâm c∆∞·ªùi h√¥m nay",
      "Ng·∫Øm m·ªôt th·ª© g√¨ ƒë√≥ m√†u xanh trong 30 gi√¢y",
      "T∆∞·ªüng t∆∞·ª£ng b·∫£n th√¢n ƒëang ƒëi d·∫°o trong v∆∞·ªùn hoa",
      "G·ª≠i l·ªùi c·∫£m ∆°n cho m·ªôt ng∆∞·ªùi ƒë·∫∑c bi·ªát"
    ];

    return challenges[Math.floor(Math.random() * challenges.length)];
  }
}

// Export singleton
export const companionAI = CompanionAI.getInstance();
