/**
 * üå§Ô∏è WEATHER ENHANCED SERVICE - K·∫øt n·ªëi s√¢u s·∫Øc v·ªõi thi√™n nhi√™n
 * 
 * Service n√†y m·ªü r·ªông weather service c∆° b·∫£n ƒë·ªÉ:
 * - T·∫°o ra nh·ªØng th√¥ng ƒëi·ªáp ph√π h·ª£p v·ªõi th·ªùi ti·∫øt v√† t√¢m tr·∫°ng
 * - K·∫øt n·ªëi Quin v·ªõi nh·ªãp ƒëi·ªáu t·ª± nhi√™n c·ªßa ng√†y
 * - Bi·∫øn th√¥ng tin th·ªùi ti·∫øt th√†nh tr·∫£i nghi·ªám c·∫£m x√∫c
 */

import { getCurrentWeather, getWeatherDescription, WeatherData } from './weatherService';

// Enhanced weather context
interface WeatherContext {
  description: string;
  temperature: number;
  feeling: 'refreshing' | 'warm' | 'cozy' | 'energizing' | 'calming';
  activity_suggestion: string;
  mood_enhancement: string;
  color_palette: string[];
}

interface SeasonalMoment {
  season: string;
  message: string;
  suggestion: string;
}

class WeatherEnhancedService {
  private static instance: WeatherEnhancedService;
  private lastWeatherCheck: number = 0;
  private cachedWeatherContext: WeatherContext | null = null;
  private readonly WEATHER_CACHE_DURATION = 10 * 60 * 1000; // 10 minutes

  private constructor() {}

  public static getInstance(): WeatherEnhancedService {
    if (!WeatherEnhancedService.instance) {
      WeatherEnhancedService.instance = new WeatherEnhancedService();
    }
    return WeatherEnhancedService.instance;
  }

  /**
   * üåà Get enhanced weather context v·ªõi c·∫£m x√∫c
   */
  public async getEnhancedWeatherContext(city: string = "Ho Chi Minh City"): Promise<WeatherContext | null> {
    const now = Date.now();
    
    // Use cache if still fresh
    if (this.cachedWeatherContext && (now - this.lastWeatherCheck) < this.WEATHER_CACHE_DURATION) {
      return this.cachedWeatherContext;
    }

    try {
      const weatherData = await getCurrentWeather(city);
      
      if ('error' in weatherData) {
        return this.getDefaultWeatherContext();
      }

      const context = this.interpretWeatherEmotionally(weatherData);
      
      this.cachedWeatherContext = context;
      this.lastWeatherCheck = now;
      
      return context;
    } catch (error) {
      return this.getDefaultWeatherContext();
    }
  }

  /**
   * üé® Interpret weather data emotionally
   */
  private interpretWeatherEmotionally(weather: WeatherData): WeatherContext {
    const temp = weather.temperature;
    const desc = weather.description.toLowerCase();
    
    let feeling: WeatherContext['feeling'] = 'calming';
    let activity_suggestion = '';
    let mood_enhancement = '';
    let color_palette: string[] = [];

    // Temperature-based feelings
    if (temp >= 30) {
      feeling = 'energizing';
      activity_suggestion = 'U·ªëng m·ªôt ly n∆∞·ªõc m√°t l·∫°nh v√† t·∫≠n h∆∞·ªüng s·ª± s·ªëng ƒë·ªông';
      mood_enhancement = 'N·∫Øng n√≥ng mang l·∫°i nƒÉng l∆∞·ª£ng t√≠ch c·ª±c';
      color_palette = ['#FF6B35', '#F29E4C', '#FFCC02'];
    } else if (temp >= 25) {
      feeling = 'warm';
      activity_suggestion = 'M·ªü c·ª≠a s·ªï ƒë·ªÉ ƒë√≥n gi√≥ tho·∫£ng, r·∫•t d·ªÖ ch·ªãu';
      mood_enhancement = 'Th·ªùi ti·∫øt ·∫•m √°p gi√∫p t√¢m h·ªìn th∆∞ th√°i';
      color_palette = ['#FFD93D', '#6BCF7F', '#4D96FF'];
    } else if (temp >= 20) {
      feeling = 'refreshing';
      activity_suggestion = 'Th·ªùi ƒëi·ªÉm ho√†n h·∫£o cho m·ªôt ly tr√† ·∫•m';
      mood_enhancement = 'Kh√¥ng kh√≠ m√°t m·∫ª l√†m ƒë·∫ßu √≥c minh m·∫´n';
      color_palette = ['#4ECDC4', '#44A08D', '#093637'];
    } else {
      feeling = 'cozy';
      activity_suggestion = 'Qu√†ng m·ªôt chi·∫øc √°o ·∫•m v√† t·∫≠n h∆∞·ªüng s·ª± ·∫•m c√∫ng';
      mood_enhancement = 'Th·ªùi ti·∫øt m√°t l√†nh t·∫°o c·∫£m gi√°c an to√†n, ·∫•m √°p';
      color_palette = ['#667eea', '#764ba2', '#f093fb'];
    }

    // Weather-specific adjustments
    if (desc.includes('m∆∞a') || desc.includes('rain')) {
      feeling = 'calming';
      activity_suggestion = 'Nghe ti·∫øng m∆∞a r∆°i, ƒë·ªÉ t√¢m h·ªìn ƒë∆∞·ª£c th∆∞ gi√£n';
      mood_enhancement = 'Ti·∫øng m∆∞a nh·∫π nh√†ng xoa d·ªãu t√¢m h·ªìn';
      color_palette = ['#667eea', '#764ba2', '#a8edea'];
    } else if (desc.includes('n·∫Øng') || desc.includes('clear') || desc.includes('sunny')) {
      activity_suggestion = '√Ånh n·∫Øng ƒë·∫πp th·∫ø n√†y, th√≠ch h·ª£p ng·∫Øm ra ngo√†i c·ª≠a s·ªï';
      mood_enhancement = '√Ånh n·∫Øng t∆∞∆°i mang l·∫°i ni·ªÅm vui t·ª± nhi√™n';
    } else if (desc.includes('m√¢y') || desc.includes('cloud')) {
      activity_suggestion = 'Ng·∫Øm nh·ªØng ƒë√°m m√¢y tr√¥i, t∆∞·ªüng t∆∞·ª£ng h√¨nh d·∫°ng ch√∫ng';
      mood_enhancement = 'M√¢y che t·∫°o kh√¥ng gian m∆° m·ªông, l√£ng m·∫°n';
      color_palette = ['#a8e6cf', '#dcedc1', '#f8f3d3'];
    }

    return {
      description: weather.description,
      temperature: temp,
      feeling,
      activity_suggestion,
      mood_enhancement,
      color_palette
    };
  }

  /**
   * üçÇ Get seasonal wisdom
   */
  public getSeasonalMoment(): SeasonalMoment {
    const month = new Date().getMonth();
    const season = this.getCurrentSeason(month);
    
    const seasonalWisdom = {
      'spring': [
        { message: 'M√πa xu√¢n nh·∫Øc nh·ªü ta v·ªÅ s·ª± kh·ªüi ƒë·∫ßu m·ªõi', suggestion: 'Tr·ªìng m·ªôt h·∫°t gi·ªëng hy v·ªçng trong l√≤ng' },
        { message: 'Hoa n·ªü kh√¥ng v·ªôi v√†ng, ta c≈©ng v·∫≠y', suggestion: 'Ki√™n nh·∫´n v·ªõi b·∫£n th√¢n trong h√†nh tr√¨nh tr∆∞·ªüng th√†nh' },
        { message: 'M√πa xu√¢n th√¨ th·∫ßm r·∫±ng s·ª± thay ƒë·ªïi lu√¥n c√≥ th·ªÉ', suggestion: 'H√£y m·ªü l√≤ng ƒë√≥n nh·∫≠n nh·ªØng ƒëi·ªÅu m·ªõi m·∫ª' }
      ],
      'summer': [
        { message: 'M√πa h√® d·∫°y ta bi·∫øt t·∫≠n h∆∞·ªüng t·ª´ng kho·∫£nh kh·∫Øc', suggestion: 'S·ªëng tr·ªçn v·∫πn trong hi·ªán t·∫°i' },
        { message: 'N·∫Øng h√® r·ª±c r·ª° nh∆∞ ni·ªÅm tin trong ta', suggestion: 'ƒê·ªÉ √°nh s√°ng b√™n trong t·ªèa s√°ng' },
        { message: 'M√πa h√® l√† th·ªùi gian c·ªßa s·ª± s·ªëng ƒë·ªông', suggestion: 'T√¨m ni·ªÅm vui trong nh·ªØng ƒëi·ªÅu ƒë∆°n gi·∫£n' }
      ],
      'autumn': [
        { message: 'Thu v·ªÅ, l√° r∆°i d·∫°y ta bi·∫øt bu√¥ng b·ªè', suggestion: 'Th·∫£ l·ªèng nh·ªØng g√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt' },
        { message: 'M√πa thu mang v·∫ª ƒë·∫πp c·ªßa s·ª± ch√≠n mu·ªìi', suggestion: 'Tr√¢n tr·ªçng nh·ªØng kinh nghi·ªám ƒë√£ c√≥' },
        { message: 'Thu sang nh·∫Øc ta v·ªÅ s·ª± c√¢n b·∫±ng trong cu·ªôc s·ªëng', suggestion: 'T√¨m ki·∫øm s·ª± h√†i h√≤a gi·ªØa l√†m vi·ªác v√† ngh·ªâ ng∆°i' }
      ],
      'winter': [
        { message: 'M√πa ƒë√¥ng d·∫°y ta s·ª©c m·∫°nh c·ªßa s·ª± tƒ©nh l·∫∑ng', suggestion: 'T·∫≠n h∆∞·ªüng nh·ªØng gi√¢y ph√∫t y√™n b√¨nh' },
        { message: 'ƒê√¥ng v·ªÅ, ta h·ªçc c√°ch tr√¢n tr·ªçng s·ª± ·∫•m √°p', suggestion: 'G·ª≠i t√¨nh y√™u th∆∞∆°ng ƒë·∫øn nh·ªØng ng∆∞·ªùi th√¢n y√™u' },
        { message: 'M√πa ƒë√¥ng l√† th·ªùi gian ƒë·ªÉ t√¢m h·ªìn ngh·ªâ ng∆°i', suggestion: 'D√†nh th·ªùi gian chƒÉm s√≥c b·∫£n th√¢n' }
      ]
    };

    const messages = seasonalWisdom[season as keyof typeof seasonalWisdom] || seasonalWisdom['spring'];
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    
    return {
      season,
      ...randomMessage
    };
  }

  /**
   * üåÖ Generate time-of-day weather message
   */
  public async generateWeatherMomentMessage(city: string = "Ho Chi Minh City"): Promise<string | null> {
    const weatherContext = await this.getEnhancedWeatherContext(city);
    if (!weatherContext) return null;

    const currentHour = new Date().getHours();
    const timeOfDay = this.getTimeOfDayPoetic(currentHour);
    
    const messages = [
      `${timeOfDay}, ${weatherContext.description}. ${weatherContext.mood_enhancement}.`,
      `${weatherContext.activity_suggestion} - ${weatherContext.description} h√¥m nay.`,
      `${timeOfDay} v·ªõi ${weatherContext.description}, ${weatherContext.mood_enhancement.toLowerCase()}.`,
    ];

    return messages[Math.floor(Math.random() * messages.length)];
  }

  /**
   * üé≠ Get poetic time of day description
   */
  private getTimeOfDayPoetic(hour: number): string {
    if (hour >= 5 && hour < 8) return 'Bu·ªïi s√°ng tinh kh√¥i';
    if (hour >= 8 && hour < 11) return 'S√°ng ƒëang r·ªô n·∫Øng';
    if (hour >= 11 && hour < 14) return 'Gi·ªØa tr∆∞a n·∫Øng ·∫•m';
    if (hour >= 14 && hour < 17) return 'Chi·ªÅu √™m ƒë·ªÅm';
    if (hour >= 17 && hour < 19) return 'Chi·ªÅu t√† l√£ng m·∫°n';
    if (hour >= 19 && hour < 22) return 'T·ªëi ·∫•m c√∫ng';
    return 'ƒê√™m y√™n b√¨nh';
  }

  /**
   * üìÖ Determine current season
   */
  private getCurrentSeason(month: number): string {
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer'; 
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
  }

  /**
   * üå§Ô∏è Default weather context when API fails
   */
  private getDefaultWeatherContext(): WeatherContext {
    return {
      description: 'th·ªùi ti·∫øt d·ªÖ ch·ªãu',
      temperature: 26,
      feeling: 'refreshing',
      activity_suggestion: 'H√≠t m·ªôt h∆°i th·∫≠t s√¢u v√† c·∫£m nh·∫≠n kho·∫£nh kh·∫Øc n√†y',
      mood_enhancement: 'M·ªói ng√†y ƒë·ªÅu mang trong m√¨nh v·∫ª ƒë·∫πp ri√™ng',
      color_palette: ['#4ECDC4', '#44A08D', '#093637']
    };
  }

  /**
   * üåü Get weather-based ThoughtBubble style
   */
  public getWeatherBasedBubbleType(weatherContext: WeatherContext | null): 'gentle' | 'rest' | 'creative' | 'healing' {
    if (!weatherContext) return 'gentle';
    
    switch (weatherContext.feeling) {
      case 'energizing':
        return 'creative';
      case 'warm':
        return 'gentle';
      case 'refreshing':
        return 'healing';
      case 'cozy':
        return 'rest';
      case 'calming':
        return 'healing';
      default:
        return 'gentle';
    }
  }
}

// Export singleton
export const weatherEnhanced = WeatherEnhancedService.getInstance();
