/**
 * üå∏ SIMPLIFIED CONTEXT SERVICE - D√†nh ri√™ng cho "Ng∆∞·ªùi B·∫°n ƒê·ªìng H√†nh AI"
 * 
 * Service n√†y ch·ªâ t·∫≠p trung v√†o:
 * - Theo d√µi th·ªùi gian v√† ng·ªØ c·∫£nh c∆° b·∫£n
 * - H·ªó tr·ª£ AI t·∫°o bong b√≥ng t∆∞∆°ng t√°c ·∫•m √°p
 * 
 * Lo·∫°i b·ªè ho√†n to√†n clipboard monitoring ƒë·ªÉ ti·∫øt ki·ªám API request
 */

import { getCurrentTimeInfo } from './weatherService';

// Simplified Types - Ch·ªâ gi·ªØ l·∫°i nh·ªØng g√¨ c·∫ßn thi·∫øt
interface ContextData {
  activeWindow: string | null;
  timeContext: any;
}

// Simplified Context Manager - Ch·ªâ t·∫≠p trung v√†o th·ªùi gian v√† c·ª≠a s·ªï
class ContextManager {
  private static instance: ContextManager;
  private currentContext: ContextData;
  private isMonitoring = false;
  private listeners: Array<(context: ContextData) => void> = [];

  private constructor() {
    this.currentContext = {
      activeWindow: null,
      timeContext: getCurrentTimeInfo(),
    };
  }

  public static getInstance(): ContextManager {
    if (!ContextManager.instance) {
      ContextManager.instance = new ContextManager();
    }
    return ContextManager.instance;
  }

  /**
   * üå∏ Kh·ªüi ƒë·ªông monitoring context - Ch·ªâ th·ªùi gian c∆° b·∫£n
   */
  public async startMonitoring(): Promise<void> {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    console.log("üå∏ Context Service ƒë√£ kh·ªüi ƒë·ªông - theo d√µi th·ªùi gian c∆° b·∫£n...");
    
    // Update time context every 30 seconds
    setInterval(() => {
      this.currentContext.timeContext = getCurrentTimeInfo();
      this.notifyListeners();
    }, 30000);
  }

  /**
   * üëÇ Subscribe to context changes
   */
  public addListener(callback: (context: ContextData) => void): void {
    this.listeners.push(callback);
  }

  /**
   * üîá Unsubscribe from context changes  
   */
  public removeListener(callback: (context: ContextData) => void): void {
    this.listeners = this.listeners.filter(listener => listener !== callback);
  }

  /**
   * üì¢ Notify all listeners
   */
  private notifyListeners(): void {
    this.listeners.forEach(listener => {
      try {
        listener(this.currentContext);
      } catch (error) {
        console.error("Error in context listener:", error);
      }
    });
  }

  /**
   * üìä Get current context
   */
  public getCurrentContext(): ContextData {
    return { ...this.currentContext };
  }

  /**
   * üõë Stop monitoring
   */
  public stopMonitoring(): void {
    this.isMonitoring = false;
    console.log("üõë Context monitoring ƒë√£ d·ª´ng");
  }
}

// Export singleton instance
export const contextManager = ContextManager.getInstance();

// Helper functions for external use
export const startContextMonitoring = () => contextManager.startMonitoring();
export const getCurrentContext = () => contextManager.getCurrentContext();
export const addContextListener = (callback: (context: ContextData) => void) => 
  contextManager.addListener(callback);
export const removeContextListener = (callback: (context: ContextData) => void) => 
  contextManager.removeListener(callback);

// Types export
export type { ContextData };