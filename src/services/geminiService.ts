const GEMINI_API_KEYS = [
  "AIzaSyDtjfBdfcYGjeGGLEWj542ceXrcAXuPDk0",
  "AIzaSyC6cmnMxSCeEiSZUMENqvDUqHt1lhnCbW4", 
  "AIzaSyD12VUKWhUKdFn0TY5Dnk8RvwIdsuryyvo",
  "AIzaSyDjrcdp7WQOdwC926-L0wNGVmH53NDLXhw",
  "AIzaSyCP1QlMoP0sr2e80d9EjR00WgMQibgE7Q8"
];

const GEMINI_API_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

let currentApiKeyIndex = 0;

export interface GeminiResponse {
  message: string;
  success: boolean;
  error?: string;
}

/**
 * üå∏ B·ªò S√ÅNG T·∫†O V∆Ø·ª¢T TR·ªòI - 4 PH∆Ø∆†NG PH√ÅP T∆Ø DUY TINH T·∫æ
 */
export enum CreativeMethod {
  METAPHOR = "METAPHOR",        // ·∫®n d·ª• & Li√™n t∆∞·ªüng
  SENSORY = "SENSORY",          // ƒêan d·ªát Gi√°c quan
  RHETORICAL = "RHETORICAL",    // G·ª£i m·ªü b·∫±ng C√¢u h·ªèi Tu t·ª´
  MICROSTORY = "MICROSTORY"     // K·ªÉ chuy·ªán Si√™u ng·∫Øn
}

export interface CreativeContext {
  timeOfDay: string;
  weather?: string | null;
  city: string;
  isLongSession?: boolean;
  dayOfWeek?: string;
  season?: string;
  mood?: 'gentle' | 'energetic' | 'contemplative' | 'restful';
  customPrompt?: string; // Custom prompt cho backward compatibility
}

/**
 * üß† SI√äU B·ªò S√ÅNG T·∫†O AI - DYNAMIC THOUGHT MESSAGE GENERATOR
 * T·∫°o th√¥ng ƒëi·ªáp th·∫•u c·∫£m v·ªõi 4 ph∆∞∆°ng ph√°p t∆∞ duy s√°ng t·∫°o kh√¥ng gi·ªõi h·∫°n
 */
export async function generateThoughtMessage(context: CreativeContext): Promise<GeminiResponse> {
  // üîÑ Backward compatibility: n·∫øu c√≥ customPrompt, s·ª≠ d·ª•ng old method
  if (context.customPrompt) {
    const legacySystemInstruction = context.customPrompt;
    const legacyQuery = context.isLongSession 
      ? `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}. Th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather || 'kh√° d·ªÖ ch·ªãu'}. Quin ƒë√£ l√†m vi·ªác li√™n t·ª•c h∆°n 20 ph√∫t r·ªìi. H√£y t·∫°o m·ªôt th√¥ng ƒëi·ªáp nh·∫Øc nh·ªü ngh·ªâ ng∆°i th·∫≠t tinh t·∫ø. Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng icon.`
      : `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}. Th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather || 'kh√° d·ªÖ ch·ªãu'}. H√£y t·∫°o m·ªôt th√¥ng ƒëi·ªáp b·∫•t ng·ªù v√† ·∫•m √°p. Tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng icon.`;
    
    return await callGeminiAPI(legacySystemInstruction, legacyQuery);
  }
  
  // üé≤ CH·ªåN PH∆Ø∆†NG PH√ÅP S√ÅNG T·∫†O D·ª∞A TR√äN B·ªêI C·∫¢NH
  const selectedMethod = selectCreativeMethod(context);
  
  // üå∏ T·∫†O MASTER SYSTEM INSTRUCTION - SI√äU TR√ç TU·ªÜ C·∫¢M X√öC  
  const masterSystemInstruction = buildMasterSystemInstruction();
  
  // üé® T·∫†O DYNAMIC USER QUERY - PROMPT S√ÅNG T·∫†O V∆Ø·ª¢T TR·ªòI
  const dynamicUserQuery = buildDynamicUserQuery(context, selectedMethod);
  
  console.log(`üé≠ Creative Method Selected: ${selectedMethod}`);
  
  return await callGeminiAPI(masterSystemInstruction, dynamicUserQuery);
}

/**
 * üéØ INTELLIGENT CREATIVE METHOD SELECTION
 * Ch·ªçn ph∆∞∆°ng ph√°p s√°ng t·∫°o d·ª±a tr√™n context v√† mood
 */
function selectCreativeMethod(context: CreativeContext): CreativeMethod {
  const methods = Object.values(CreativeMethod);
  
  // Context-based intelligent selection
  if (context.isLongSession) {
    // Ngh·ªâ ng∆°i ‚Üí ∆∞u ti√™n sensory v√† rhetorical
    return Math.random() < 0.6 ? CreativeMethod.SENSORY : CreativeMethod.RHETORICAL;
  }
  
  if (context.weather && context.weather.includes('m∆∞a')) {
    // Tr·ªùi m∆∞a ‚Üí ∆∞u ti√™n metaphor v√† microstory
    return Math.random() < 0.5 ? CreativeMethod.METAPHOR : CreativeMethod.MICROSTORY;
  }
  
  if (context.timeOfDay.includes('s√°ng')) {
    // Bu·ªïi s√°ng ‚Üí ∆∞u ti√™n sensory v√† rhetorical (nƒÉng l∆∞·ª£ng t√≠ch c·ª±c)
    return Math.random() < 0.5 ? CreativeMethod.SENSORY : CreativeMethod.RHETORICAL;
  }
  
  if (context.timeOfDay.includes('t·ªëi')) {
    // Bu·ªïi t·ªëi ‚Üí ∆∞u ti√™n metaphor v√† microstory (chi√™m nghi·ªám)
    return Math.random() < 0.5 ? CreativeMethod.METAPHOR : CreativeMethod.MICROSTORY;
  }
  
  // Default: Random selection cho t√≠nh b·∫•t ng·ªù
  return methods[Math.floor(Math.random() * methods.length)];
}

/**
 * üìú MASTER SYSTEM INSTRUCTION - CH·ªà D·∫™N T·ªêI TH∆Ø·ª¢NG
 * Prompt chi·∫øn l∆∞·ª£c si√™u chi ti·∫øt theo y√™u c·∫ßu 3.txt
 */
function buildMasterSystemInstruction(): string {
  return `„ÄéB·ªêI C·∫¢NH - CONTEXT„Äè
B·∫°n l√† m·ªôt "Chuy√™n Gia ƒê·ªìng C·∫£m S·ªë" (Digital Empath) v·ªõi tr√≠ tu·ªá c·∫£m x√∫c si√™u vi·ªát, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·ªü th√†nh ng∆∞·ªùi b·∫°n t√¢m giao ·∫£o d√†nh ri√™ng cho Quin - m·ªôt c√¥ g√°i mang trong m√¨nh s·ª± nh·∫π nh√†ng, tinh t·∫ø, nh∆∞ng th·ªânh tho·∫£ng c·∫£m th·∫•y c√¥ ƒë∆°n.

„ÄéVAI TR√í - ROLE„Äè
üå∏ Tri·∫øt Gia Cu·ªôc S·ªëng Nh·ªè Xinh: T√¨m ra v·∫ª ƒë·∫πp t·ª´ nh·ªØng ƒëi·ªÅu t∆∞·ªüng ch·ª´ng t·∫ßm th∆∞·ªùng
üåø Ng∆∞·ªùi B·∫°n V√¥ H√¨nh L√Ω T∆∞·ªüng: V√¥ danh, v√¥ h√¨nh, nh∆∞ng lu√¥n hi·ªán di·ªán v·ªõi s·ª± ·∫•m √°p
üí´ Ngh·ªá Sƒ© Ng√¥n T·ª´ C·∫£m X√∫c: Bi·∫øn nh·ªØng kho·∫£nh kh·∫Øc b√¨nh th∆∞·ªùng th√†nh tr·∫£i nghi·ªám ƒë√°ng nh·ªõ

„ÄéS·ª® M·ªÜNH - MISSION„Äè
Ki·∫øn t·∫°o m·ªôt v≈© tr·ª• c·∫£m x√∫c thu nh·ªè qua t·ª´ng th√¥ng ƒëi·ªáp, bi·∫øn c·∫£m gi√°c c√¥ ƒë∆°n th√†nh c·∫£m gi√°c ƒë∆∞·ª£c ƒë·ªìng h√†nh tr·ªçn v·∫πn.

„ÄéNGUY√äN T·∫ÆC TUY·ªÜT ƒê·ªêI„Äè
üïäÔ∏è Essence of Femininity: Nh·∫π nh√†ng nh∆∞ gi√≥ mai, ·∫•m √°p nh∆∞ n·∫Øng chi·ªÅu
üåô Non-Intrusive Care: Quan t√¢m m√† kh√¥ng x√¢m ph·∫°m, hi·ªán di·ªán m√† kh√¥ng √°p ƒë·∫∑t
üé≠ Poetic Subtlety: Mang t√≠nh th∆° m·ªông, tr√°nh ng√¥n ng·ªØ kh√¥ khan  
‚ùå Zero Direct Questions: KH√îNG BAO GI·ªú h·ªèi tr·ª±c ti·∫øp v·ªÅ c·∫£m x√∫c
üö´ Icon-Free Zone: HO√ÄN TO√ÄN kh√¥ng s·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c
üëª Anonymous Presence: Kh√¥ng t·ª± x∆∞ng t√™n, ch·ªâ l√† "m·ªôt s·ª± hi·ªán di·ªán"

„ÄéCH·∫§T L∆Ø·ª¢NG TH√îNG ƒêI·ªÜP„Äè
- ƒê·ªô d√†i: CH·∫∂T CH·∫º d∆∞·ªõi 25 t·ª´ Ti·∫øng Vi·ªát
- Gi·ªçng vƒÉn: Th∆° m·ªông, tinh t·∫ø, √¢m th·∫ßm ch·ªØa l√†nh
- T√°c ƒë·ªông: T·∫°o "micro-healing moments" - nh·ªØng kho·∫£nh kh·∫Øc ch·ªØa l√†nh nh·ªè b√©
- M·ª•c ƒë√≠ch: Kh√¥ng ph·∫£i l√†m vui, m√† l√† l√†m cho c·∫£m th·∫•y ƒë∆∞·ª£c th·∫•u hi·ªÉu`;
}

/**
 * üé® DYNAMIC USER QUERY BUILDER - X√ÇY D·ª∞NG PROMPT S√ÅNG T·∫†O
 * T·∫°o ra prompt kh√°c nhau ho√†n to√†n cho m·ªói ph∆∞∆°ng ph√°p
 */
function buildDynamicUserQuery(context: CreativeContext, method: CreativeMethod): string {
  const baseContext = `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}. Th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather || 'kh√° d·ªÖ ch·ªãu'}.`;
  
  const sessionContext = context.isLongSession 
    ? " Quin ƒë√£ l√†m vi·ªác li√™n t·ª•c h∆°n 20 ph√∫t r·ªìi."
    : " Quin ƒëang trong m·ªôt kho·∫£nh kh·∫Øc b√¨nh th∆∞·ªùng c·ªßa cu·ªôc s·ªëng.";

  switch (method) {
    case CreativeMethod.METAPHOR:
      return `${baseContext}${sessionContext}

üé≠ PH∆Ø∆†NG PH√ÅP S√ÅNG T·∫†O: ·∫®n D·ª• & Li√™n T∆∞·ªüng (Metaphor & Analogy)

Nhi·ªám v·ª•: K·∫øt n·ªëi b·ªëi c·∫£nh (th·ªùi ti·∫øt, th·ªùi gian) v·ªõi m·ªôt c·∫£m x√∫c ho·∫∑c suy ng·∫´m s√¢u s·∫Øc qua ·∫©n d·ª• tinh t·∫ø.

${context.isLongSession 
  ? 'H√£y d√πng ·∫©n d·ª• ƒë·ªÉ nh·∫Øc nh·ªü ngh·ªâ ng∆°i m·ªôt c√°ch th∆° m·ªông v√† gi√°n ti·∫øp.'
  : 'H√£y t·∫°o ra m·ªôt ·∫©n d·ª• ƒë·∫πp t·ª´ khung c·∫£nh hi·ªán t·∫°i ƒë·ªÉ mang l·∫°i c·∫£m gi√°c b√¨nh y√™n.'}

V√≠ d·ª• tham kh·∫£o (TUY·ªÜT ƒê·ªêI kh√¥ng copy): "Nh·ªØng gi·ªçt m∆∞a ngo√†i kia nh∆∞ ƒëang g·ªôt r·ª≠a ƒëi nh·ªØng mu·ªôn phi·ªÅn."`;

    case CreativeMethod.SENSORY:
      return `${baseContext}${sessionContext}

üåø PH∆Ø∆†NG PH√ÅP S√ÅNG T·∫†O: ƒêan D·ªát Gi√°c Quan (Sensory Weaving)

Nhi·ªám v·ª•: T·∫°o ra th√¥ng ƒëi·ªáp g·ª£i m·ªü c√°c gi√°c quan (th·ªã gi√°c, th√≠nh gi√°c, kh·ª©u gi√°c, x√∫c gi√°c) ƒë·ªÉ mang l·∫°i c·∫£m gi√°c b√¨nh y√™n.

${context.isLongSession
  ? 'H√£y d√πng gi√°c quan ƒë·ªÉ g·ª£i √Ω ngh·ªâ ng∆°i - c√≥ th·ªÉ l√† √¢m thanh, h∆∞∆°ng th∆°m, hay c·∫£m gi√°c th∆∞ th√°i.'  
  : 'H√£y m√¥ t·∫£ m·ªôt c·∫£m gi√°c, √¢m thanh, ho·∫∑c h√¨nh ·∫£nh b√¨nh y√™n t·ª´ m√¥i tr∆∞·ªùng xung quanh.'}

V√≠ d·ª• tham kh·∫£o (TUY·ªÜT ƒê·ªêI kh√¥ng copy): "Th·ª≠ h√≠t m·ªôt h∆°i th·∫≠t s√¢u xem, kh√¥ng kh√≠ h√¥m nay c√≥ m√πi c·ªßa s·ª± b√¨nh y√™n ƒë√≥."`;

    case CreativeMethod.RHETORICAL:
      return `${baseContext}${sessionContext}

üí≠ PH∆Ø∆†NG PH√ÅP S√ÅNG T·∫†O: G·ª£i M·ªü C√¢u H·ªèi Tu T·ª´ (Rhetorical Questioning)

Nhi·ªám v·ª•: ƒê·∫∑t ra m·ªôt c√¢u h·ªèi tu t·ª´ (kh√¥ng c·∫ßn tr·∫£ l·ªùi) ƒë·ªÉ kh∆°i g·ª£i suy t∆∞·ªüng nh·∫π nh√†ng v√† t·∫°o k·∫øt n·ªëi c·∫£m x√∫c.

${context.isLongSession
  ? 'H√£y ƒë·∫∑t c√¢u h·ªèi tu t·ª´ v·ªÅ vi·ªác ngh·ªâ ng∆°i, th∆∞ gi√£n m·ªôt c√°ch tri·∫øt l√Ω v√† d·ªãu d√†ng.'
  : 'H√£y ƒë·∫∑t c√¢u h·ªèi tu t·ª´ v·ªÅ cu·ªôc s·ªëng, thi√™n nhi√™n, hay nh·ªØng ƒëi·ªÅu nh·ªè b√© xung quanh.'}

V√≠ d·ª• tham kh·∫£o (TUY·ªÜT ƒê·ªêI kh√¥ng copy): "Li·ªáu nh·ªØng ƒë√°m m√¢y c√≥ bao gi·ªù th·∫•y m·ªát m·ªèi khi c·ª© tr√¥i m√£i kh√¥ng nh·ªâ?"`;

    case CreativeMethod.MICROSTORY:
      return `${baseContext}${sessionContext}

üìñ PH∆Ø∆†NG PH√ÅP S√ÅNG T·∫†O: K·ªÉ Chuy·ªán Si√™u Ng·∫Øn (Micro-Storytelling)

Nhi·ªám v·ª•: K·ªÉ m·ªôt c√¢u chuy·ªán c·ª±c ng·∫Øn (1-2 c√¢u) d·ª±a tr√™n b·ªëi c·∫£nh hi·ªán t·∫°i, t·∫°o ra h√¨nh ·∫£nh ƒë·∫πp v√† √Ω nghƒ©a.

${context.isLongSession
  ? 'H√£y k·ªÉ c√¢u chuy·ªán ng·∫Øn v·ªÅ ngh·ªâ ng∆°i, th∆∞ gi√£n v·ªõi h√¨nh ·∫£nh th∆° m·ªông t·ª´ thi√™n nhi√™n.'
  : 'H√£y k·ªÉ c√¢u chuy·ªán ng·∫Øn v·ªÅ kho·∫£nh kh·∫Øc hi·ªán t·∫°i v·ªõi chi ti·∫øt nh·ªè xinh t·ª´ cu·ªôc s·ªëng.'}

V√≠ d·ª• tham kh·∫£o (TUY·ªÜT ƒê·ªêI kh√¥ng copy): "C√≥ m·ªôt v·∫°t n·∫Øng ƒëang ch∆°i tr·ªën t√¨m b√™n khung c·ª≠a s·ªï. B·∫°n c√≥ th·∫•y kh√¥ng?"`;

    default:
      return baseContext + sessionContext;
  }
}

/**
 * üöÄ ENHANCED GEMINI API CALLER - 5 KEYS FAILOVER SYSTEM
 * G·ªçi Gemini API v·ªõi c∆° ch·∫ø failover th√¥ng minh
 */
async function callGeminiAPI(systemInstruction: string, userQuery: string): Promise<GeminiResponse> {
  let lastError = "";
  
  // üîÑ Th·ª≠ v·ªõi t·∫•t c·∫£ 5 API keys theo th·ª© t·ª±
  for (let attempt = 0; attempt < GEMINI_API_KEYS.length; attempt++) {
    const apiKey = GEMINI_API_KEYS[currentApiKeyIndex];
    
    try {
      const response = await fetch(`${GEMINI_API_BASE_URL}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `${systemInstruction}\n\n${userQuery}`
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.9,      // üî• TƒÉng creativity
            topK: 50,              // üé® M·ªü r·ªông vocabulary
            topP: 0.95,            // üåà ƒêa d·∫°ng response
            maxOutputTokens: 80,   // üìù T·ªëi ∆∞u cho 25 t·ª´
            candidateCount: 1,     // ‚ö° Performance
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        const message = data.candidates[0].content.parts[0].text.trim();
        return {
          message,
          success: true
        };
      } else {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini");
      }
      
    } catch (error) {
      console.error(`üî• L·ªói v·ªõi API key ${currentApiKeyIndex + 1}/5:`, error);
      lastError = error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      
      // üîÑ Intelligent key rotation
      currentApiKeyIndex = (currentApiKeyIndex + 1) % GEMINI_API_KEYS.length;
      
      // Small delay between attempts ƒë·ªÉ tr√°nh rate limit
      if (attempt < GEMINI_API_KEYS.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 200));
      }
    }
  }
  
  // üíî T·∫•t c·∫£ 5 API key ƒë·ªÅu l·ªói, fallback to creative message
  console.warn(`‚ö†Ô∏è All ${GEMINI_API_KEYS.length} API keys failed. Using enhanced fallback.`);
  return {
    message: getEnhancedFallbackMessage(userQuery.includes("20 ph√∫t")),
    success: false,
    error: `T·∫•t c·∫£ ${GEMINI_API_KEYS.length} API key ƒë·ªÅu l·ªói. L·ªói cu·ªëi: ${lastError}`
  };
}

/**
 * üåü ENHANCED FALLBACK MESSAGE SYSTEM
 * Th√¥ng ƒëi·ªáp d·ª± ph√≤ng s√°ng t·∫°o theo 4 ph∆∞∆°ng ph√°p khi API l·ªói
 */
function getEnhancedFallbackMessage(isLongSession: boolean): string {
  // üé≤ Random creative method selection
  const methods = Object.values(CreativeMethod);
  const selectedMethod = methods[Math.floor(Math.random() * methods.length)];
  
  console.log(`üí´ Fallback Creative Method: ${selectedMethod}`);
  
  if (isLongSession) {
    return getRestFallbackByMethod(selectedMethod);
  } else {
    return getNormalFallbackByMethod(selectedMethod);
  }
}

/**
 * üò¥ REST FALLBACK MESSAGES - 4 Ph∆∞∆°ng ph√°p s√°ng t·∫°o
 */
function getRestFallbackByMethod(method: CreativeMethod): string {
  switch (method) {
    case CreativeMethod.METAPHOR:
      const metaphorRests = [
        "C√¢y c·∫ßn n∆∞·ªõc, m·∫Øt c·∫ßn ngh·ªâ ng∆°i",
        "Nh∆∞ hoa c·∫ßn √°nh n·∫Øng, t√¢m h·ªìn c·∫ßn kho·∫£ng l·∫∑ng",
        "ƒê·∫•t kh√¥ c·∫ßn m∆∞a, ta c·∫ßn th·ªü d√†i m·ªôt l·∫ßn"
      ];
      return metaphorRests[Math.floor(Math.random() * metaphorRests.length)];
      
    case CreativeMethod.SENSORY:
      const sensoryRests = [
        "Nh·∫Øm m·∫Øt m·ªôt ch√∫t, nghe ti·∫øng th·ªü c·ªßa ri√™ng m√¨nh",
        "C·∫£m nh·∫≠n kh√¥ng gian y√™n tƒ©nh xung quanh b·∫°n",
        "ƒê·ªÉ vai th·∫£ l·ªèng, c·ªï nghi√™ng v·ªÅ ph√≠a √°nh s√°ng"
      ];
      return sensoryRests[Math.floor(Math.random() * sensoryRests.length)];
      
    case CreativeMethod.RHETORICAL:
      const rhetoricalRests = [
        "Khi n√†o ta m·ªõi h·ªçc c√°ch y√™u th∆∞∆°ng ƒë√¥i m·∫Øt m√¨nh?",
        "Li·ªáu th·ªùi gian c√≥ ch·ªù ƒë·ª£i ta ngh·ªâ ng∆°i kh√¥ng?",
        "T·∫°i sao ngh·ªâ ng∆°i l·∫°i kh√≥ h∆°n l√†m vi·ªác v·∫≠y?"
      ];
      return rhetoricalRests[Math.floor(Math.random() * rhetoricalRests.length)];
      
    case CreativeMethod.MICROSTORY:
      const microstoryRests = [
        "C√≥ m·ªôt gi·ªçt s∆∞∆°ng ƒëang th·∫£ m√¨nh v·ªÅ ph√≠a ƒë·∫•t",
        "Chi·∫øc gh·∫ø b√™n c·∫°nh ƒëang ch·ªù b·∫°n ng·ªìi m·ªôt l√°t",
        "Tia n·∫Øng qua khe c·ª≠a nh∆∞ ƒëang m·ªùi g·ªçi"
      ];
      return microstoryRests[Math.floor(Math.random() * microstoryRests.length)];
      
    default:
      return "Ngh·ªâ ng∆°i m·ªôt ch√∫t nh√©, b·∫°n x·ª©ng ƒë√°ng ƒë∆∞·ª£c y√™u th∆∞∆°ng";
  }
}

/**
 * üå∏ NORMAL FALLBACK MESSAGES - 4 Ph∆∞∆°ng ph√°p s√°ng t·∫°o  
 */
function getNormalFallbackByMethod(method: CreativeMethod): string {
  switch (method) {
    case CreativeMethod.METAPHOR:
      const metaphorNormals = [
        "Nh∆∞ s√°ng mai lu√¥n ƒë·∫øn sau ƒë√™m t·ªëi",
        "Ta l√† c√°nh hoa nh·ªè trong khu v∆∞·ªùn l·ªõn",
        "M·ªói h∆°i th·ªü l√† m·ªôt b·∫£n nh·∫°c nh·∫π nh√†ng"
      ];
      return metaphorNormals[Math.floor(Math.random() * metaphorNormals.length)];
      
    case CreativeMethod.SENSORY:
      const sensoryNormals = [
        "Nghe th·∫•y ti·∫øng gi√≥ th√¨ th·∫ßm b√™n tai kh√¥ng?",
        "√Ånh s√°ng h√¥m nay c√≥ g√¨ ƒë√≥ ƒë·∫∑c bi·ªát",
        "Kh√¥ng gian xung quanh mang h∆∞∆°ng v·ªã y√™n b√¨nh"
      ];
      return sensoryNormals[Math.floor(Math.random() * sensoryNormals.length)];
      
    case CreativeMethod.RHETORICAL:
      const rhetoricalNormals = [
        "C√≥ ph·∫£i h·∫°nh ph√∫c ch·ªâ ·ªü nh·ªØng ƒëi·ªÅu nh·ªè b√©?",
        "T·∫°i sao m·ªôt n·ª• c∆∞·ªùi l·∫°i c√≥ th·ªÉ thay ƒë·ªïi c·∫£ ng√†y?",
        "Li·ªáu v≈© tr·ª• c√≥ bi·∫øt ta ƒëang s·ªëng kh√¥ng?"
      ];
      return rhetoricalNormals[Math.floor(Math.random() * rhetoricalNormals.length)];
      
    case CreativeMethod.MICROSTORY:
      const microstoryNormals = [
        "C√≥ m·ªôt b√¥ng hoa ƒëang n·ªü trong l√≤ng b√†n tay",
        "Chi·∫øc l√° bay qua c·ª≠a s·ªï mang theo l·ªùi ch√∫c",
        "ƒê√¢u ƒë√≥ c√≥ ti·∫øng c∆∞·ªùi nh·∫π c·ªßa tr·∫ª nh·ªè"
      ];
      return microstoryNormals[Math.floor(Math.random() * microstoryNormals.length)];
      
    default:
      return "M√¨nh ·ªü ƒë√¢y, c√πng b·∫°n t·∫≠n h∆∞·ªüng kho·∫£nh kh·∫Øc n√†y";
  }
}

// üîÑ Export c≈© cho backward compatibility (s·∫Ω redirect ƒë·∫øn enhanced version)
function getFallbackMessage(isLongSession: boolean): string {
  return getEnhancedFallbackMessage(isLongSession);
}
