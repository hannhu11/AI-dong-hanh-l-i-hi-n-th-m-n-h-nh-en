import React, { useState, useEffect, memo } from 'react';
import {
  Container, Title, Text, Button, Card, Group, Badge, Stack,
  Modal, TextInput, Textarea, Select, ActionIcon, Tooltip,
  Flex, Alert, Loader, Divider, ThemeIcon
} from '@mantine/core';
import {
  IconPlayerPlay, IconPlus, IconEdit, IconTrash, IconBolt,
  IconApps, IconLink, IconFolder, IconCode, IconClock,
  IconRocket, IconTarget, IconBulb, IconSearch
} from '@tabler/icons-react';
import { useDisclosure } from '@mantine/hooks';
import { notifications } from '@mantine/notifications';
import {
  scenariosManager, Scenario, ScenarioAction, ActionType,
  executeScenario, getScenarioSuggestions, searchScenarios
} from '../../services/scenariosService';
import './ScenariosTab.css';

// Action type icons mapping
const ACTION_ICONS: Record<ActionType, React.ReactNode> = {
  open_app: <IconApps size={16} />,
  open_url: <IconLink size={16} />,
  open_folder: <IconFolder size={16} />,
  run_command: <IconCode size={16} />,
  delay: <IconClock size={16} />
};

// Category colors
const CATEGORY_COLORS: Record<Scenario['category'], string> = {
  work: 'blue',
  personal: 'green', 
  development: 'violet',
  entertainment: 'orange',
  custom: 'gray'
};

const ScenariosTab: React.FC = () => {
  const [scenarios, setScenarios] = useState<Scenario[]>([]);
  const [selectedScenario, setSelectedScenario] = useState<Scenario | null>(null);
  const [isExecuting, setIsExecuting] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [loadingSuggestions, setLoadingSuggestions] = useState(false);

  // Modal states
  const [modalOpened, { open: openModal, close: closeModal }] = useDisclosure(false);
  const [isCreating, setIsCreating] = useState(false);

  // Form state for creating/editing scenarios
  const [formData, setFormData] = useState<Partial<Scenario>>({
    name: '',
    description: '',
    icon: '‚ö°',
    category: 'custom',
    actions: [],
    tags: [],
    isActive: true
  });

  // Load scenarios on mount
  useEffect(() => {
    const loadedScenarios = scenariosManager.getAllScenarios();
    setScenarios(loadedScenarios);

    // Listen for scenario changes
    const handleScenariosChange = (updatedScenarios: Scenario[]) => {
      setScenarios(updatedScenarios);
    };

    scenariosManager.addListener(handleScenariosChange);
    
    return () => {
      scenariosManager.removeListener(handleScenariosChange);
    };
  }, []);

  // Load AI suggestions
  useEffect(() => {
    const loadSuggestions = async () => {
      setLoadingSuggestions(true);
      try {
        const aiSuggestions = await getScenarioSuggestions();
        setSuggestions(aiSuggestions);
      } catch (error) {
        console.error('Error loading suggestions:', error);
      } finally {
        setLoadingSuggestions(false);
      }
    };

    loadSuggestions();
  }, []);

  // Handle scenario execution
  const handleExecuteScenario = async (scenario: Scenario) => {
    if (isExecuting) return;

    setIsExecuting(true);
    notifications.show({
      id: `executing-${scenario.id}`,
      title: 'üöÄ ƒêang th·ª±c thi...',
      message: `"${scenario.name}" - ${scenario.actions.length} h√†nh ƒë·ªông`,
      loading: true,
      autoClose: false
    });

    try {
      const result = await executeScenario(scenario.id);
      
      notifications.update({
        id: `executing-${scenario.id}`,
        title: result.success ? '‚úÖ Th√†nh c√¥ng!' : '‚ö†Ô∏è Ho√†n th√†nh c√≥ l·ªói',
        message: result.message,
        loading: false,
        color: result.success ? 'green' : 'orange',
        autoClose: 5000
      });

      // Refresh scenarios to update usage count
      const updatedScenarios = scenariosManager.getAllScenarios();
      setScenarios(updatedScenarios);
      
    } catch (error) {
      notifications.update({
        id: `executing-${scenario.id}`,
        title: '‚ùå L·ªói!',
        message: 'Kh√¥ng th·ªÉ th·ª±c thi scenario',
        loading: false,
        color: 'red',
        autoClose: 5000
      });
    } finally {
      setIsExecuting(false);
    }
  };

  // Handle create/edit modal
  const handleOpenCreateModal = () => {
    setIsCreating(true);
    setSelectedScenario(null);
    setFormData({
      name: '',
      description: '',
      icon: '‚ö°',
      category: 'custom',
      actions: [],
      tags: [],
      isActive: true
    });
    openModal();
  };

  const handleOpenEditModal = (scenario: Scenario) => {
    setIsCreating(false);
    setSelectedScenario(scenario);
    setFormData(scenario);
    openModal();
  };

  // Filter scenarios based on search
  const filteredScenarios = searchQuery 
    ? searchScenarios(searchQuery)
    : scenarios;

  const displayedScenarios = filteredScenarios.filter(s => s.isActive);

  return (
    <Container size="lg" py="xl">
      {/* Header */}
      <div className="scenarios-header">
        <Group justify="space-between" mb="xl">
          <div>
            <Title order={2}>
              <ThemeIcon size="lg" variant="light" color="blue" mr="sm">
                <IconRocket size={20} />
              </ThemeIcon>
              üéØ Qu·∫£n L√Ω K·ªãch B·∫£n
            </Title>
            <Text c="dimmed" size="sm">
              T·ª± ƒë·ªông h√≥a workflow v·ªõi AI th√¥ng minh - T·∫°o v√† th·ª±c thi c√°c chu·ªói h√†nh ƒë·ªông
            </Text>
          </div>
          
          <Button
            leftSection={<IconPlus size={16} />}
            onClick={handleOpenCreateModal}
            variant="filled"
            size="sm"
          >
            T·∫°o K·ªãch B·∫£n
          </Button>
        </Group>

        {/* Search */}
        <TextInput
          placeholder="üîç T√¨m ki·∫øm k·ªãch b·∫£n..."
          leftSection={<IconSearch size={16} />}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.currentTarget.value)}
          mb="md"
        />
      </div>

      {/* AI Suggestions */}
      <Card withBorder mb="xl" className="suggestions-card">
        <Group justify="space-between" mb="md">
          <Group>
            <ThemeIcon size="sm" variant="light" color="violet">
              <IconBulb size={14} />
            </ThemeIcon>
            <Text fw={600} size="sm">AI G·ª£i √ù K·ªãch B·∫£n</Text>
          </Group>
          {loadingSuggestions && <Loader size="xs" />}
        </Group>

        <Stack gap="xs">
          {suggestions.map((suggestion, index) => (
            <Alert 
              key={index}
              variant="light" 
              color="violet"
              title={suggestion}
              style={{ cursor: 'pointer' }}
              onClick={handleOpenCreateModal}
            >
              <Text size="xs" c="dimmed">
                Nh·∫•p ƒë·ªÉ t·∫°o k·ªãch b·∫£n d·ª±a tr√™n g·ª£i √Ω n√†y
              </Text>
            </Alert>
          ))}
        </Stack>
      </Card>

      {/* Scenarios Grid */}
      <div className="scenarios-grid">
        {displayedScenarios.length === 0 ? (
          <Card withBorder p="xl" className="empty-state">
            <Stack align="center" gap="md">
              <ThemeIcon size="xl" variant="light" color="gray">
                <IconTarget size={32} />
              </ThemeIcon>
              <div style={{ textAlign: 'center' }}>
                <Text fw={600} mb="xs">Ch∆∞a c√≥ k·ªãch b·∫£n n√†o</Text>
                <Text c="dimmed" size="sm">
                  T·∫°o k·ªãch b·∫£n ƒë·∫ßu ti√™n ƒë·ªÉ t·ª± ƒë·ªông h√≥a workflow c·ªßa b·∫°n!
                </Text>
              </div>
              <Button 
                leftSection={<IconPlus size={16} />}
                onClick={handleOpenCreateModal}
                variant="light"
              >
                T·∫°o K·ªãch B·∫£n ƒê·∫ßu Ti√™n
              </Button>
            </Stack>
          </Card>
        ) : (
          <div className="scenarios-list">
            {displayedScenarios.map((scenario) => (
              <Card 
                key={scenario.id} 
                withBorder 
                className="scenario-card"
                padding="md"
              >
                {/* Header */}
                <Group justify="space-between" mb="sm">
                  <Group>
                    <Text size="lg">{scenario.icon}</Text>
                    <div>
                      <Text fw={600} size="sm" truncate>
                        {scenario.name}
                      </Text>
                      <Badge 
                        size="xs" 
                        variant="light"
                        color={CATEGORY_COLORS[scenario.category]}
                      >
                        {scenario.category}
                      </Badge>
                    </div>
                  </Group>

                  <Group gap="xs">
                    <Tooltip label="Ch·ªânh s·ª≠a">
                      <ActionIcon
                        variant="subtle"
                        size="sm"
                        onClick={() => handleOpenEditModal(scenario)}
                      >
                        <IconEdit size={14} />
                      </ActionIcon>
                    </Tooltip>

                    <Tooltip label="X√≥a">
                      <ActionIcon
                        variant="subtle"
                        size="sm"
                        color="red"
                        onClick={() => {
                          scenariosManager.deleteScenario(scenario.id);
                          notifications.show({
                            message: `ƒê√£ x√≥a "${scenario.name}"`,
                            color: 'red',
                            autoClose: 3000
                          });
                        }}
                      >
                        <IconTrash size={14} />
                      </ActionIcon>
                    </Tooltip>
                  </Group>
                </Group>

                {/* Description */}
                <Text c="dimmed" size="xs" mb="sm">
                  {scenario.description}
                </Text>

                {/* Actions Preview */}
                <Group mb="md" gap="xs">
                  {scenario.actions.slice(0, 3).map((action, index) => (
                    <Tooltip key={index} label={action.description}>
                      <ThemeIcon size="xs" variant="light" color="blue">
                        {ACTION_ICONS[action.type]}
                      </ThemeIcon>
                    </Tooltip>
                  ))}
                  {scenario.actions.length > 3 && (
                    <Text c="dimmed" size="xs">
                      +{scenario.actions.length - 3} more
                    </Text>
                  )}
                </Group>

                {/* Stats */}
                <Group justify="space-between" mb="md">
                  <Text c="dimmed" size="xs">
                    ƒê√£ ch·∫°y: {scenario.usageCount} l·∫ßn
                  </Text>
                  <Text c="dimmed" size="xs">
                    {scenario.actions.length} h√†nh ƒë·ªông
                  </Text>
                </Group>

                {/* Execute Button */}
                <Button
                  fullWidth
                  leftSection={<IconPlayerPlay size={14} />}
                  variant="light"
                  size="xs"
                  onClick={() => handleExecuteScenario(scenario)}
                  disabled={isExecuting}
                  loading={isExecuting}
                >
                  {isExecuting ? 'ƒêang th·ª±c thi...' : 'Ch·∫°y K·ªãch B·∫£n'}
                </Button>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Create/Edit Modal - Simplified for now */}
      <Modal
        opened={modalOpened}
        onClose={closeModal}
        title={isCreating ? "üÜï T·∫°o K·ªãch B·∫£n M·ªõi" : "‚úèÔ∏è Ch·ªânh S·ª≠a K·ªãch B·∫£n"}
        size="lg"
      >
        <Stack gap="md">
          <Alert color="blue" variant="light">
            <Text size="sm">
              üí° <strong>ƒêang ph√°t tri·ªÉn:</strong> Giao di·ªán t·∫°o/ch·ªânh s·ª≠a k·ªãch b·∫£n chi ti·∫øt s·∫Ω ƒë∆∞·ª£c ho√†n thi·ªán trong phi√™n b·∫£n ti·∫øp theo. 
              Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c k·ªãch b·∫£n c√≥ s·∫µn ho·∫∑c ch·ªù c·∫≠p nh·∫≠t!
            </Text>
          </Alert>

          <Group justify="flex-end">
            <Button variant="light" onClick={closeModal}>
              ƒê√≥ng
            </Button>
          </Group>
        </Stack>
      </Modal>
    </Container>
  );
};

export default memo(ScenariosTab);
